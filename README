Title: Project 1: A simple two-dimensional drawing system
Author: Reuben Castelino
Class: ECS 175 - Fall 2017
ID: 999702367

--------------------------------------------------
To compile:
 1. tar -xvzf rcasteli_p1.tar
 2. cd rcasteli_p1
 3. make

To run:
  ./p1 test_file_name [1|2]

--------------------------------------------------
The polygon data file is a basic text file with the following format:

number_of_polygons
polygon1_number_of_vertices
descripton_of_polygon
x1 y1
x2 y2
x3 y3
polygon2_number_of_vertices
description_of_polygon
x1 y1
x2 y2
x3 y3
x4 y4
x5 y5

Sample configs are given in the provided code

--------------------------------------------------
The following commands are allowed to interact with the polygons:

Selecting polygons to alter:
  1. Click on the polyong (it will turn red) or
  2. You can select them with numbers 1-9

Moving polygons:
  1. You can use the arrow keys or
  2. You can drag with the mouse

Scaling polygons:
  1. Press s to turn on scaling mode for the current polygon
    note: the fill color will turn green
  2. Press + (or =) to scale up by 1.1
  3. Press - to scale down by 0.9

Rotating Polygons:
  1. Press r to turn on rotating mode for the current polygon
    note: the fill color will turn red
  2. Press + (or =) to rotate clockwise by 1 degree
  3. Press - to rotate counterclockwise by 1 degree

To draw lines via DDA/Bresenham:
  1. The second command argument should be 1 for DDA
  1. The second command argument should be 2 for Bresenham

--------------------------------------------------

Bugs:
  1. Rasterizing doesn't always work because my scanlines can't always tell when to turn off so random lines are drawn past the polygon to the right

--------------------------------------------------
Extra coding:

  1. The professor mentioned that while framebuffers are easier to code, they are more inefficent and it's better to use an active edge list. I managed to code with an active edge list using a map<Point, PointInfo, PointComparator> which keeps track of only the edges. And then I draw only the points laid out in each polygons' edge list 
  2. For rasterization, instead of scan lining the whole grid, I only scan line each polygon from its minimum y coordinate to its maximum y coordinate which I liked. I had a plan to rasterize based on pairs of coordinates but I didn't have enough time to get it to work. I'm going to try and code it and hopefully submit it late but what I have so far is a slightly more efficient scan line I think. It might have been more efficient if my edge list could be iterated by it's y values.




